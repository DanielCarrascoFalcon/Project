{"version":3,"sources":["../../src/controllers/task.controller.js"],"names":["Task","require","createTask","req","res","body","place","attendant","description","priority","create","fields","newTask","json","message","data","console","log","getTasks","findAll","tasks","getOneTask","id","params","findOne","where","task","deleteOneTask","destroy","deleteRowCount","count","updateTask","update","taskupdated"],"mappings":"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","sourcesContent":["//import Task from \"../models/Task\";\r\nvar Task = require(\"../models\").Task;\r\n\r\nexport async function createTask(req, res) {\r\n  const { place, attendant, description, priority } = req.body;\r\n  try {\r\n    let newTask = await Task.create(\r\n      {\r\n        place,\r\n        attendant,\r\n        description,\r\n        priority,\r\n      },\r\n      {\r\n        fields: [\"place\", \"attendant\", \"description\", \"priority\"],\r\n      }\r\n    );\r\n    if (newTask) {\r\n      res.json({\r\n        message: \"Tarea creada correctamente\",\r\n        data: newTask,\r\n      });\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n    res.json({\r\n      message: \"Algo salio mal con la creaci√≥n de la tarea\",\r\n      data: {},\r\n    });\r\n  }\r\n}\r\n\r\nexport async function getTasks(req, res) {\r\n  const tasks = await Task.findAll();\r\n  res.json(tasks);\r\n}\r\n\r\nexport async function getOneTask(req, res) {\r\n  const { id } = req.params;\r\n  const task = await Task.findOne({\r\n    where: {\r\n      id,\r\n    },\r\n  });\r\n  res.json(task);\r\n}\r\n\r\nexport async function deleteOneTask(req, res) {\r\n  const { id } = req.params;\r\n  const deleteRowCount = await Task.destroy({\r\n    where: {\r\n      id,\r\n    },\r\n  });\r\n  res.json({\r\n    message: \"Tarea borrada exitosamente\",\r\n    count: deleteRowCount,\r\n  });\r\n}\r\n\r\nexport async function updateTask(req, res) {\r\n  const { id } = req.params;\r\n  const { place, attendant, description, priority } = req.body;\r\n  const task = await Task.findOne({\r\n    where: {\r\n      id,\r\n    },\r\n  });\r\n  const taskupdated = await task.update({\r\n    place,\r\n    attendant,\r\n    description,\r\n    priority,\r\n  });\r\n  res.json({\r\n    message: \"Tarea actualizada exitosamente\",\r\n    data: taskupdated,\r\n  });\r\n}\r\n"],"file":"task.controller.js"}